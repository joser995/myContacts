// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myContacts.Data;

#nullable disable

namespace myContacts.Migrations
{
    [DbContext(typeof(myContactDbContext))]
    partial class myContactDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("myContacts.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fax")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUsername")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Email = "jramosaviles.dev@gmail.com",
                            Name = "Jose Ramos",
                            Notes = "This is a test contact",
                            Phone = "7876745062"
                        },
                        new
                        {
                            ContactId = 2,
                            Email = "peterparker@example.com",
                            Name = "Peter Parker",
                            Notes = "This is another test contact",
                            Phone = "7875145265"
                        },
                        new
                        {
                            ContactId = 3,
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Notes = "This is another test contact",
                            Phone = "1234567890"
                        },
                        new
                        {
                            ContactId = 4,
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Notes = "Yet another test contact",
                            Phone = "9876543210"
                        },
                        new
                        {
                            ContactId = 5,
                            Email = "alicejohnson@example.com",
                            Name = "Alice Johnson",
                            Notes = "One more test contact",
                            Phone = "5555555555"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
